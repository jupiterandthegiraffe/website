$(function(){$("body").one("pinegrow-ready",function(e,l){const o="local--";function d(e){return o+encodeURI(e.toLowerCase())}window.PgBackendProviderFileSystem=class{constructor(){}callApi(e,t,r,o,a){return this[e]?this[e](t,r,o,a):(o&&o({error:`Unknown local API call ${e}.`}),null)}apiGetProjects(e,t,r){t({user:{name:"Local user",level:2,email:"",id:1},projects:[{name:"Local test",url:"",project_id:"local-test",thumb:null,tags:[]}],lessons:{}})}async getLocalImageUrl(r){this.image_worker||(this.image_worker=new Worker("lib/crsa/plugins/pg.image.worker.js"));const o=this.image_worker;return new Promise((t,e)=>{o.postMessage({type:"createImageURL",imageData:r,mimeType:l.getMimeType(r.name)}),o.onmessage=function(e){"imageURLCreated"===e.data.type&&t(e.data.url)},o.onerror=e})}apiLoadProject(r,o,e,s){!async function(){var e=s.fsHandle;const a={};async function n(e,t){for await(const o of e.values()){var r;"file"===o.kind?(r=await o.getFile(),r=l.isFileEditableOrInCodeEditor(o.name)?await r.text():`@mapurl:`+s.blobs.makeURL(r),a[encodeURI(t+o.name)]={thumb:null,version:1,content:r}):"directory"!==o.kind||".git"===o.name||"node_modules"===o.name||o.name.startsWith(".")||await n(o,t+o.name+"/")}}await n(e,""),console.log(a);var t={name:e.name,loaded_project_id:r.project_id,urls:a};s.fsHandle=e;try{await u.db.storeProject({name:d(e.name),folder_name:e.name,directoryHandle:e})}catch(e){console.error("Failed to store project:",e)}o(t)}()}apiSaveProject(n,i,e,c){!async function(){const s=c.fsHandle;for(var r=[],e=(console.log("Saving files",n.urls),$.each(n.urls,function(e,t){!l.isFileEditableOrInCodeEditor(e)||t.content.startsWith("@mapurl:")||r.push({name:decodeURI(e),content:t.content})}),async function(e,t){var r=e.split("/"),o=r.pop();let a=s;for(const n of r)a=await a.getDirectoryHandle(n,{create:t});return a.getFileHandle(o,{create:t})}),t=[],o=0;o<r.length;o++)try{var a=await(await e(r[o].name,!0)).createWritable();await a.write(r[o].content),await a.close()}catch(e){t.push({url:r[o].name,message:"Unable to save",details:e.toString()})}if(n.delete_pages)for(o=0;o<n.delete_pages.length;o++)try{await(await e(decodeURI(n.delete_pages[o]),!1)).remove()}catch(e){t.push({url:n.delete_pages[o],message:"Unable to delete",details:e.toString()})}try{await u.db.storeProject({name:d(s.name),folder_name:s.name,directoryHandle:s})}catch(e){console.error("Failed to store project:",e)}i&&i({issues:t})}()}apiRenameProject(e,t,r,o){t({project_id:d(o.fsHandle.name),project_name:o.fsHandle.name}),l.backend.saveCurrentProject(null,!0)}apiDeleteProjects(e,t,r){t&&t()}apiSetLessonStatus(e,t,r){t&&t()}apiSetLessonStatusMultiple(e,t,r){t&&t()}};class t{constructor(){this.DB_NAME="PinegrowLocal",this.STORE_NAME="projects",this.DB_VERSION=1,this.db=null}async openDB(){return this.db||new Promise((t,r)=>{var e=indexedDB.open(this.DB_NAME,this.DB_VERSION);e.onerror=e=>r("Error opening database"),e.onsuccess=e=>{this.db=e.target.result,t(this.db)},e.onupgradeneeded=e=>{this.db=e.target.result,this.db.createObjectStore(this.STORE_NAME,{keyPath:"name"}).createIndex("lastAccessed","lastAccessed")}})}async storeProject(o){return await this.openDB(),new Promise((e,t)=>{var r=this.db.transaction([this.STORE_NAME],"readwrite").objectStore(this.STORE_NAME),r=(o.lastAccessed=(new Date).toISOString(),r.put(o));r.onerror=()=>t("Error storing project"),r.onsuccess=()=>e()})}async getProject(a){return await this.openDB(),new Promise((t,e)=>{const r=this.db.transaction([this.STORE_NAME],"readwrite").objectStore(this.STORE_NAME),o=r.get(a);o.onerror=()=>e("Error retrieving project"),o.onsuccess=()=>{var e;o.result&&((e=o.result).lastAccessed=(new Date).toISOString(),r.put(e)),t(o.result)}})}async deleteProject(o){return await this.openDB(),new Promise((e,t)=>{var r=this.db.transaction([this.STORE_NAME],"readwrite").objectStore(this.STORE_NAME).delete(o);r.onerror=()=>t("Error deleting project"),r.onsuccess=()=>e()})}async getAllProjects(){return await this.openDB(),new Promise((r,e)=>{var t=this.db.transaction([this.STORE_NAME],"readonly").objectStore(this.STORE_NAME).index("lastAccessed").openCursor(null,"prev");const o=[];t.onerror=()=>e("Error retrieving all projects"),t.onsuccess=e=>{var t=e.target.result;t?(o.push(t.value),t.continue()):r(o)}})}}var u=new class{constructor(){this.db=new t;const n=this;l.addEventHandler("on_user_projects_received_from_backend_async",async function(e,t,r){var o=await n.db.getAllProjects(),a=0;o.forEach(function(e){t.projects.splice(a++,0,{name:e.folder_name,project_id:e.name,label:"Local"})}),r(t)}),l.addEventHandler("on_get_manager_for_project",function(e,t,r){t.startsWith(o)&&(r.manager=n)})}getPurePid(e){return e}canRemoveFromStartScreen(e){return!0}async removeFromStartScreen(e){this.db.deleteProject(e)}canSetImage(e){return!1}canRename(e){return!1}canDelete(e){return!1}canAlwaysEditProject(e){return!0}canSaveToLocal(e){return!0}async openProject(t,e){let r=(await this.db.getProject(t)).directoryHandle;var o={mode:"readwrite"};return"granted"!==await r.queryPermission(o)&&"granted"!==await r.requestPermission(o)?(l.showQuickError("Unable to get permission to access the selected folder."),!1):new Promise(function(e){l.tutorialsManager.openProject("https://"+t,e,null,{fsHandle:r})})}async chooseLocalFolder(){if(!window.showDirectoryPicker)return l.showAlert(`<p>This feature requires File System API, supported in Chrome and Edge browsers. Another reason why the API might not be available is accessing the app through insecure connection.</p>`,"File access is not available",null,"Ok"),null;try{var e=await window.showDirectoryPicker();return"granted"!==await e.requestPermission({mode:"readwrite"})?(l.showQuickError("Unable to get permission to access the selected folder."),null):e}catch(e){return l.showQuickError("Unable to get the selected folder."),null}}async selectAndOpenProject(t){if(t=t||await this.chooseLocalFolder())return new Promise(function(e){l.tutorialsManager.openProject("https://"+d(t.name),e,null,{fsHandle:t})})}async saveProjectAsLocal(r,o){const a=this,n=await this.chooseLocalFolder();if(n)return r=r||l.getCurrentProject(),new Promise(function(t){new PgProjectDownloader(r).saveToLocalFolder(n,function(){function e(){l.backend.saveAndCloseCurrentProject(async function(){await a.selectAndOpenProject(n),t(!0)},!1,r.isLoadedFromAnotherUser||r.isCreatedWithNewProject)}"ask"===o?l.showAlert(`<p>The project was saved to the local folder <code>${n.name}</code>.</p><p>Would you like to open it now in the editor?</p>`,"Open the local project?","No","Yes, open it",function(){t()},function(){e()}):o?e():(l.showQuickMessage(`Project was saved to the local folder ${n.name}.`),t(!0))})})}}})});